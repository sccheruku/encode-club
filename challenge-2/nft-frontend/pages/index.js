import { useEffect, useState } from 'react';
import { connect, keyStores, WalletConnection, Contract, KeyPair } from "near-api-js";
import { Box, Tab, TabPanel, Button, Tabs } from '@mui/material';
import { generateNftData } from './utils/common';
import { buyNft, getAvailableNfts } from './utils/api-helper';
import TabsHeader from './components/TabsHeader';

const CONTRACT_NAME = "dev-1644038625906-15095311362465";

const config = {
  networkId: "testnet",
  nodeUrl: "https://rpc.testnet.near.org",
  walletUrl: "https://wallet.testnet.near.org",
  helperUrl: "https://helper.testnet.near.org",
  explorerUrl: "https://explorer.testnet.near.org",
};

export default function Home() {
  const [near, setNear] = useState();
  const [wallet, setWallet] = useState();
  const [loading, setLoading] = useState(true);
  const [keyStore, setKeyStore] = useState();
  const [account, setAccount] = useState();
  const [nfts, setNfts] = useState();
  const [availableNfts, setAvailableNfts] = useState();
  useEffect(() => {
    setKeyStore(new keyStores.BrowserLocalStorageKeyStore());
    getAvailableNfts().then(setAvailableNfts);
  }, []);

  useEffect(() => {
    if (keyStore) {
      connect({ ...config, keyStore }).then(setNear);
    }
  }, [keyStore]);

  useEffect(() => {
    if (near) {
      checkForSigninRedirect();
      // setWallet(new WalletConnection(near));
    }
  }, [near]);

  useEffect(() => {
    if (account) {
      setLoading(false);
      getOwnedTokens();
    }
  }, [account])

  useEffect(() => {
    if (wallet) {
      walletSignIn(wallet);
      // getBalanceTest();
      getOwnedTokens();
    }
  }, [wallet])

  async function checkForSigninRedirect() {
    if (window.location.href.includes("account_id")) {
      await initAccount(new URLSearchParams(window.location.search));
    }
    else {
      walletSignIn(new WalletConnection(near));
    }
  }

  function walletSignIn(wallet) {
    wallet.requestSignIn(
      CONTRACT_NAME, // contract requesting access
      "Example App", // optional
      `http://localhost:3000`, // optional
      `http://localhost:3000` // optional
    );
  }
  async function getOwnedTokens() {
    const contract = new Contract(
      account, // the account object that is connecting
      CONTRACT_NAME,
      {
        // name of contract you're connecting to
        viewMethods: ["nft_tokens_for_owner"], // view methods do not change state but usually return a value
        changeMethods: [""], // change methods modify state
        sender: account, // account object to initialize and sign transactions.
      }
    );
    console.log(contract);
    const result = await contract.nft_tokens_for_owner(
      {
        account_id: account.accountId, // argument name and value - pass empty object if no args required
      },
      // 300000000000000, // attached GAS (optional)
      // 1000000000000000000000000 // attached deposit in yoctoNEAR (optional)
    );

    console.log("nft_tokens_for_owner", result)
    setNfts(result);
  }

  async function initAccount(params) {
    const account = await near.account(params.get("account_id"));
    setAccount(account);
  }

  if (loading) {
    return <>Please log in...</>
  }

  return (
    <div>
      <head>
        <title>Near Protocol - NFT Frontend</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </head>

      <main>
        <TabsHeader nfts={nfts} availableNfts={availableNfts} accountId={account.accountId} />
      </main>
    </div>
  )
}